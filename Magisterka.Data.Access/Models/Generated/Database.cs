




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DBContext`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `data source=PAWELPC;initial catalog=Magisterka;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Magisterka.Data.Access.PP
{

	public partial class DBContextDB : Database
	{
		public DBContextDB() 
			: base("DBContext")
		{
			CommonConstruct();
		}

		public DBContextDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			DBContextDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static DBContextDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new DBContextDB();
        }

		[ThreadStatic] static DBContextDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static DBContextDB repo { get { return DBContextDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.ErrorLog")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class ErrorLog : DBContextDB.Record<ErrorLog>  
    {



		[Column] public int Id { get; set; }





		[Column] public DateTime Date { get; set; }





		[Column] public string Exception { get; set; }





		[Column] public int? StartStopPointId { get; set; }



	}

    

	[TableName("dbo.LastPoints")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class LastPoint : DBContextDB.Record<LastPoint>  
    {



		[Column] public int Id { get; set; }





		[Column] public int StartPointId { get; set; }





		[Column] public int EndPointId { get; set; }



	}

    

	[TableName("dbo.Log")]




	[ExplicitColumns]

    public partial class Log : DBContextDB.Record<Log>  
    {



		[Column] public int Id { get; set; }





		[Column] public DateTime Date { get; set; }





		[Column] public string Thread { get; set; }





		[Column] public string Level { get; set; }





		[Column] public string Logger { get; set; }





		[Column] public string Message { get; set; }





		[Column] public string Exception { get; set; }



	}

    

	[TableName("dbo.Parameters")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Parameter : DBContextDB.Record<Parameter>  
    {



		[Column] public int Id { get; set; }





		[Column] public int TestAlgorithmTypeEnum { get; set; }





		[Column] public int AdaptationFunctionTypeEnum { get; set; }





		[Column] public int ChangeNumber { get; set; }





		[Column] public int LinkType { get; set; }





		[Column] public int PopulationCount { get; set; }





		[Column] public double? MutationProbability { get; set; }





		[Column] public int? NumberOfEvaluation { get; set; }





		[Column] public int? NumberOfSquares { get; set; }





		[Column] public int? NumberOfNeighborSquares { get; set; }





		[Column] public Guid? LockedFor { get; set; }





		[Column] public DateTime? LockDate { get; set; }



	}

    

	[TableName("dbo.Result")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Result : DBContextDB.Record<Result>  
    {



		[Column] public long Id { get; set; }





		[Column] public int ParametersId { get; set; }





		[Column] public long StartStopPointsId { get; set; }





		[Column] public double GenerationTime { get; set; }





		[Column] public bool RouteExists { get; set; }





		[Column] public bool Error { get; set; }



	}

    

	[TableName("dbo.SingleResult")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class SingleResult : DBContextDB.Record<SingleResult>  
    {



		[Column] public long Id { get; set; }





		[Column] public long ResultId { get; set; }





		[Column] public int Fitness { get; set; }





		[Column] public int? TimeFromStart { get; set; }





		[Column] public int Time { get; set; }





		[Column] public int Parts { get; set; }





		[Column] public int BusConnectionsCount { get; set; }





		[Column] public int WalkConnectionsCount { get; set; }





		[Column] public int LinesCount { get; set; }



	}

    

	[TableName("dbo.StartStopPoints")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class StartStopPoint : DBContextDB.Record<StartStopPoint>  
    {



		[Column] public long Id { get; set; }





		[Column] public int StartId { get; set; }





		[Column] public int StopId { get; set; }



	}

    

	[TableName("dbo.sysdiagrams")]



	[PrimaryKey("diagram_id")]




	[ExplicitColumns]

    public partial class sysdiagram : DBContextDB.Record<sysdiagram>  
    {



		[Column] public string name { get; set; }





		[Column] public int principal_id { get; set; }





		[Column] public int diagram_id { get; set; }





		[Column] public int? version { get; set; }





		[Column] public byte[] definition { get; set; }



	}


}
